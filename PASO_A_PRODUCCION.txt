PASO A PASO PARA INSTALAR Y PONER EN PRODUCCIÓN SKY PASS (BOT WHATSAPP + APP PYTHON)
====================================================================================

1. ACTUALIZA E INSTALA DEPENDENCIAS DEL SISTEMA
-----------------------------------------------
sudo apt update && sudo apt upgrade -y
sudo apt install -y build-essential libcairo2-dev libjpeg-dev libpango1.0-dev libgif-dev librsvg2-dev python3 python3-pip python3-venv git nginx

2. CLONA TU PROYECTO
--------------------
cd ~
git clone https://github.com/josemestre3009/skypass.git
cd ~/skypass

3. INSTALA Y CONFIGURA LA APP PYTHON (Flask)
--------------------------------------------
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt

# Prueba que funcione:
python app.py
# Detén con Ctrl+C si todo arranca bien

4. INSTALA Y CONFIGURA EL BOT NODE.JS
-------------------------------------
cd ~/skypass/base-baileys-memory
rm -rf node_modules package-lock.json
npm install

# Prueba el bot manualmente:
node app.js
# Debes ver mensajes de que el bot y el portal web están escuchando en sus puertos.
# Prueba los endpoints:
curl http://localhost:3002/status
curl -X POST http://localhost:3002/send -H "Content-Type: application/json" -d '{"telefono":"573001234567","mensaje":"Prueba"}'
# Si todo responde bien, detén con Ctrl+C.

5. CONFIGURA CREDENCIALES Y VARIABLES DE ENTORNO
------------------------------------------------

1. Copia o crea los archivos de credenciales necesarios en el servidor:
   - Para el bot de WhatsApp:
     - Sube tu archivo `creds.json` a `/root/skypass/base-baileys-memory/bot_sessions/`
   - Para la app Python, si usas variables de entorno o un archivo `.env`, créalo en `/root/skypass/`:
     nano /root/skypass/.env
     Y agrega tus claves, por ejemplo:
     SECRET_KEY=tu_clave_secreta
     API_KEY=tu_api_key

2. Asegúrate de que los archivos tengan los permisos correctos:
   sudo chown root:root /root/skypass/base-baileys-memory/bot_sessions/creds.json
   sudo chmod 600 /root/skypass/base-baileys-memory/bot_sessions/creds.json
   # Haz lo mismo para cualquier otro archivo sensible (.env, claves, etc)

3. Verifica que las rutas y nombres de los archivos coincidan con lo que espera tu código.

4. (Opcional) Exporta variables de entorno en el servicio systemd si lo necesitas:
   - Puedes agregar líneas `Environment=CLAVE=valor` en la sección [Service] de tu archivo systemd.

6. CREA Y CONFIGURA LOS SERVICIOS SYSTEMD PARA PRODUCCIÓN
---------------------------------------------------------

### A. Servicio para el BOT NODE.JS

1. Crea el archivo del servicio:
   sudo nano /etc/systemd/system/bot-baileys.service

2. Pega la siguiente configuración:
[Unit]
   Description=Bot Baileys Skypass
   After=network.target

[Service]
   User=root
   WorkingDirectory=/root/skypass/base-baileys-memory
   Environment=PORT=3002
   ExecStart=/usr/bin/node app.js
   Restart=always
   StandardOutput=journal
   StandardError=journal

[Install]
   WantedBy=multi-user.target

### B. Servicio para la APP PYTHON (Flask + Gunicorn)

1. Activa el entorno virtual:
   cd ~/skypass
   source venv/bin/activate

2. Instala Gunicorn dentro del entorno virtual:
   pip install gunicorn

3. Verifica que Gunicorn esté instalado y tenga permisos de ejecución:
   ls -l ~/skypass/venv/bin/gunicorn
   chmod +x ~/skypass/venv/bin/gunicorn

4. Prueba Gunicorn manualmente:
   ~/skypass/venv/bin/gunicorn -w 4 -b 0.0.0.0:8000 app:app
   # Si ves que Gunicorn arranca y muestra "Listening at: ..." ¡todo bien!
   # Deténlo con Ctrl+C.

5. Crea el archivo del servicio:
   sudo nano /etc/systemd/system/skypass-web.service

6. Pega la siguiente configuración:
[Unit]
   Description=Skypass Web App
   After=network.target

[Service]
   User=root
   WorkingDirectory=/root/skypass
   Environment="PATH=/root/skypass/venv/bin"
   ExecStart=/root/skypass/venv/bin/gunicorn -w 4 -b 0.0.0.0:8000 app:app
   Restart=always
   StandardOutput=journal
   StandardError=journal

[Install]
   WantedBy=multi-user.target

7. Recarga systemd y arranca los servicios:
   sudo systemctl daemon-reload
   sudo systemctl start bot-baileys
   sudo systemctl enable bot-baileys
   sudo systemctl start skypass-web
   sudo systemctl enable skypass-web

8. Verifica el estado y los logs:
   sudo systemctl status bot-baileys
   sudo systemctl status skypass-web
   sudo journalctl -u bot-baileys.service -n 50
   sudo journalctl -u skypass-web.service -n 50

# Si algún servicio falla:
# - Revisa los logs con 'journalctl -u NOMBRE_DEL_SERVICIO -f' para ver el error exacto.
# - Si el error es de permisos, revisa el usuario y la propiedad de los archivos.
# - Si el error es "no module named app", asegúrate de que el archivo app.py está en /root/skypass.

7. CONFIGURA NGINX PARA EXPONER LA APP PYTHON
---------------------------------------------
sudo nano /etc/nginx/sites-available/skypass

Pega la siguiente configuración (ajusta server_name):

server {
    listen 80;
    server_name TU_DOMINIO_O_IP;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

Actívalo:
sudo ln -s /etc/nginx/sites-available/skypass /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx

8. (OPCIONAL) CONFIGURA HTTPS CON LET'S ENCRYPT
-----------------------------------------------
sudo apt install certbot python3-certbot-nginx -y
sudo certbot --nginx

9. PRUEBA TODO
--------------
- Accede a tu app web por el dominio o IP.
- Accede al portal web del bot por el puerto que elegiste (ej: http://TU_IP:3002).
- Prueba enviar mensajes desde tu app Python al endpoint /send del bot.

10. SI ALGO FALLA
-----------------
- Verifica los logs de los servicios:
  sudo journalctl -u bot-baileys.service -f
  sudo journalctl -u skypass-web.service -f
  tail -n 50 /var/log/nginx/error.log
- Asegúrate de que los puertos no estén ocupados:
  sudo ss -tuln | grep 3002
  sudo ss -tuln | grep 8000
- Revisa que los endpoints respondan correctamente.

11. COSAS PARA TENER EN CUENTA EN PRODUCCIÓN
============================================

- **Errores de puertos ocupados (EADDRINUSE):**
  Usa `ss -tuln | grep PUERTO` para ver qué proceso lo usa y mátalo con `kill PID` o cambia el puerto en la configuración.

- **Firewall bloqueando puertos:**
  Abre los puertos necesarios con `sudo ufw allow PUERTO/tcp` y recarga con `sudo ufw reload`.

- **No se muestra el QR en la web:**
  Usa siempre la URL pública del portal web del bot para el QR (ej: `http://TU_IP:3002/qr.png?time=...`).

- **Errores 500 (Internal Server Error):**
  Revisa los logs del backend y asegúrate de que el microservicio en el puerto 3002 esté corriendo.

- **Logs del sistema:**
  Usa `journalctl -u NOMBRE_DEL_SERVICIO -n 50` para ver los últimos logs.

- **Errores de conexión a microservicio:**
  Si tu backend no puede conectarse a `localhost:3002`, asegúrate de que el bot esté corriendo y escuchando en ese puerto.

- **Errores de favicon o recursos estáticos:**
  Los errores 404 de `/static/favicon.svg` no afectan la funcionalidad, pero puedes agregar un favicon para evitar el mensaje.

- **Errores de CORS o red:**
  Si accedes al QR desde otro dominio/IP, asegúrate de que el puerto esté abierto y no haya restricciones de CORS.

- **Reiniciar servicios tras cambios:**
  Siempre reinicia el servicio después de modificar el código con `sudo systemctl restart skypass-web` o el nombre correspondiente.

- **Variables de entorno y dependencias:**
  Asegúrate de que todas las variables de entorno y dependencias estén configuradas correctamente en el VPS.

- **Errores de permisos en archivos/carpetas:**
  Si ves errores al crear archivos (como `creds.json`), asegúrate de que la carpeta existe y tiene permisos de escritura para el usuario que ejecuta el bot.

- **Verifica siempre la URL generada en el HTML:**
  Si el QR no se ve, revisa el HTML generado y asegúrate de que la URL del `<img src="...">` es la correcta y accesible.

---

¡LISTO!  
Con este archivo, tu despliegue será ordenado, seguro y fácil de depurar.  
Si tienes dudas o necesitas adaptar algo a tu caso, ¡avísame! 

sudo systemctl daemon-reload
sudo systemctl restart skypass-web 